import java.util.*;
import java.util.Scanner;
public class Closest{
    //x is assumed to be non-negative as we know the leading bit is 0.
    // we restrict to our attention to 63 bits
static final int NUM_UNSIGN_BITS=63;
// Function to return the number
// closest to x which has equal
// number of set bits as x
public static long closestIntSameBitCount(long x) {
    for(int i=0;i<NUM_UNSIGN_BITS -1;i++)
    {
        if(((x>>>i &1)!=((x>>>(i+1))&1)))
        {
            x^=(1L<<i)|(1L<<(i+1));
            return x;
        }
    }
   
      throw new IllegalArgumentException("All bits are 0 or 1");
    }
    public static void main(String []args)
    {
        long n;
        Scanner obj=new Scanner(System.in);
        n=obj.nextInt();
        System.out.println(closestIntSameBitCount(n));
    }
}
